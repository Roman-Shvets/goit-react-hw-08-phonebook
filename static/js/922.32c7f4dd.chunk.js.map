{"version":3,"file":"static/js/922.32c7f4dd.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/EditModal/EditModal.styled.js","components/EditModal/EditModal.js","page/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n\nexport const visibleContact = ({ contacts: { items }, filter }) => {\n  if (!filter) {\n    return items;\n  }\n  return items.filter(contact => contact.name.toLowerCase().includes(filter));\n};","import styled from 'styled-components';\n\nexport const LabelFiter = styled.label`\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n  font-size: 20px;\n  margin-top: 10px;\n  width: 100%;\n  gap: 15px;\n`;\n\nexport const InputFilter = styled.input`\n  padding-left: 15px;\n  height: 30px;\n  background-color: transparent;\n  border: 1px solid #4343b0;\n  outline: none;\n  color: #4343b0;\n`;","import { LabelFiter, InputFilter } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { queryFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = e => {\n    dispatch(queryFilter(e.currentTarget.value));\n  };\n\n  return (\n    <LabelFiter>\n      Find contacts by name:\n      <InputFilter type=\"text\" name=\"filter\" onChange={handleChangeFilter} />\n    </LabelFiter>\n  );\n};","import styled from 'styled-components';\nimport {\n  Form as AddContactForm,\n  Field,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const Form = styled(AddContactForm)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin: 10px auto;\n  gap: 12px;\n  max-width: 332px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 5px;\n  font-size: 20px;\n  width: 100%;\n `;\n\nexport const ButtonSubmit = styled.button`\n  font-size: 15px;\n  font-weight: 700;\n  padding: 8px;\n  margin-left:120px;\n  border-radius: 10px;\n  background-color: #5472ea47;\n\n  :hover {\n    background-color: #4343b0;\n    color: white;\n  }\n`;\n\nexport const Input = styled(Field)`\n  padding-left: 15px;\n  height: 30px;\n  background-color: transparent;\n  border: 1px solid #4343b0;\n  outline: none;\n  color: #4343b0;\n `;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  color: red;\n  font-size: 12px;\n`;","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Form,\n  Label,\n  ButtonSubmit,\n  Input,\n  ErrorMessage,\n} from './ContactForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces.'\n    )\n    .required(),\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +, min 5 numbers'\n    )\n    .required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, actions) => {\n    const newContact = { name, number };\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={ContactSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Label>\n          Name:\n          <Input name=\"name\" />\n        </Label>\n        <ErrorMessage name=\"name\" component=\"p\" />\n        <Label>\n          Number:\n          <Input type=\"tel\" name=\"number\" />\n        </Label>\n        <ErrorMessage name=\"number\" component=\"p\" />\n        <ButtonSubmit type=\"submit\">Add contact</ButtonSubmit>\n      </Form>\n    </Formik>\n  );\n};","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 25px;\n`;\n\nexport const ItemsContact = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Contact = styled.p`\n  font-size: 20px;\n  width: 100%;\n  padding: 0 10px;\n`;\n\nexport const Button = styled.button`\n  font-size: 15px;\n   font-weight: 700;\n  padding: 0px 10px;\n  border: 1px solid black;\n  background-color: #5472ea47;\n  height: 30px;\n  border-radius: 5px;\n\n  :hover {\n    background-color: #4343b0;\n    color: white;\n  }\n`;\nexport const ButtonContainer = styled.div`\n  display: flex;\n  gap: 12px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  ListContacts,\n  ItemsContact,\n  Contact,\n  Button,\n  ButtonContainer,\n} from './ContactList.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { visibleContact, getIsLoading } from 'redux/contacts/selectors';\n\nexport const ContactList = ({ isOpenModal }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const getFilteredContacts = useSelector(visibleContact);\n\n  return (\n    <ListContacts>\n      {getFilteredContacts.map(contact => (\n        <ItemsContact key={contact.id}>\n          <Contact>\n            {contact.name}: {contact.number}\n          </Contact>\n          <ButtonContainer>\n            <Button\n              disabled={isLoading}\n              type=\"button\"\n              onClick={() =>\n                isOpenModal(contact.name, contact.number, contact.id)\n              }\n            >\n              Edit\n            </Button>\n            <Button\n              disabled={isLoading}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </Button>\n          </ButtonContainer>\n        </ItemsContact>\n      ))}\n    </ListContacts>\n  );\n};","import styled from 'styled-components';\nexport const Modal = styled.div`\n  position: relative;\n  background-color: gray;\n  padding: 40px;\n  max-width: 100%;\n`;\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.767);\n  padding: 20px;\n`;\n\nexport const FormModal = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const LabelModal = styled.label`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 30px;\n  font-size: 20px;\n  width: 100%;\n`;\n\nexport const InputModal = styled.input`\n  padding-left: 15px;\n  height: 30px;\n  background-color: transparent;\n  border: 1px solid #4343b0;\n  outline: none;\n`;\n\nexport const BtnCloseModal = styled.button`\n  cursor: pointer;\n  margin: 0;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background-color: transparent;\n  border: none;\n  :hover {\n    color: white;\n  }\n`;\n\nexport const ButtonEdit = styled.button`\n  font-size: 20px;\n  font-weight: 700;\n  padding: 5px 30px;\n  border-radius: 10px;\n  background-color: #4343b0;\n  color:black;\n\n  :hover {\n    background-color: darkblue;\n    color: white;\n  }\n`;","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editContact } from 'redux/contacts/operations';\nimport {\n  Modal,\n  Overlay,\n  FormModal,\n  BtnCloseModal,\n  LabelModal,\n  InputModal,\n  ButtonEdit,\n} from './EditModal.styled';\nimport { CgCloseO } from 'react-icons/cg';\n\nexport const EditModal = ({ name, number, idUser, isCloseModal }) => {\n  const [userName, setUserName] = useState(name);\n  const [userNumber, setUserNamber] = useState(number);\n\n  const dispatch = useDispatch();\n\n  function handleCange(e) {\n    const { name, value } = e.currentTarget;\n    name === 'number' ? setUserNamber(value) : setUserName(value);\n  }\n  function onSubmit(e) {\n    e.preventDefault();\n    dispatch(editContact({ idUser, userName, userNumber }));\n    isCloseModal();\n  }\n  useEffect(() => {\n    function handleCloseECC(e) {\n      if (e.key === 'Escape') {\n        isCloseModal();\n      }\n    }\n\n    window.addEventListener('keydown', handleCloseECC);\n\n    return () => window.removeEventListener('keydown', handleCloseECC);\n  }, [isCloseModal]);\n\n  function handleCloseBackdrop(e) {\n    if (e.currentTarget === e.target) {\n      isCloseModal();\n    }\n  }\n  return (\n    <Overlay onClick={handleCloseBackdrop}>\n      <Modal>\n        <FormModal onSubmit={onSubmit}>\n          <LabelModal>\n            Name :\n            <InputModal\n              name=\"name\"\n              type=\"text\"\n              placeholder={name}\n              value={userName}\n              onChange={handleCange}\n            />\n          </LabelModal>\n          <LabelModal>\n            Number :\n            <InputModal\n              name=\"number\"\n              type=\"tel\"\n              placeholder={number}\n              value={userNumber}\n              onChange={handleCange}\n            />\n          </LabelModal>\n          <BtnCloseModal type=\"button\" onClick={isCloseModal}>\n            <CgCloseO size=\"20\" />\n          </BtnCloseModal>\n          <ButtonEdit type=\"submit\">Edit</ButtonEdit>\n        </FormModal>\n      </Modal>\n    </Overlay>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  getContacts,\n  visibleContact,\n  getIsLoading,\n  getError,\n} from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport {\n  TitleContactList,\n  Notification,\n  TextErrorPage,\n} from 'components/App.styled';\nimport { useState } from 'react';\nimport { EditModal } from 'components/EditModal/EditModal';\n\nfunction ContactsPage() {\n  const [isModal, setIsModal] = useState(false);\n  const [userName, setUserName] = useState('');\n  const [idUser, setIdUser] = useState('');\n  const [userNamber, setUserNamber] = useState('');\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(getContacts);\n  const getFilteredContacts = useSelector(visibleContact);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const isOpenModal = (name, number, id) => {\n    setIsModal(true);\n    setUserName(name);\n    setUserNamber(number);\n    setIdUser(id);\n  };\n\n  const isCloseModal = () => {\n    setIsModal(false);\n  };\n\n  return (\n    <>\n      <TitleContactList>Contacts</TitleContactList>\n      <ContactForm />\n\n      {isLoading && <div>Loading...</div>}\n      {contacts.length === 0 && !isLoading && !error && (\n        <Notification>There is nothing in phonebook</Notification>\n      )}\n\n      {contacts.length !== 0 && (\n        <div>\n          <Filter />\n          {getFilteredContacts.length === 0 && !isLoading && (\n            <Notification>There isn't any contact with this name</Notification>\n          )}\n          <ContactList isOpenModal={isOpenModal} />\n        </div>\n      )}\n\n      {error && <TextErrorPage>Try again, please..</TextErrorPage>}\n      {isModal && (\n        <EditModal\n          name={userName}\n          number={userNamber}\n          idUser={idUser}\n          isCloseModal={isCloseModal}\n        />\n      )}\n    </>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","visibleContact","filter","contact","name","toLowerCase","includes","LabelFiter","styled","InputFilter","Filter","dispatch","useDispatch","type","onChange","e","queryFilter","currentTarget","value","Form","AddContactForm","Label","ButtonSubmit","Input","Field","ErrorMessage","FormikErrorMessage","ContactSchema","Yup","shape","matches","required","number","ContactForm","initialValues","validationSchema","onSubmit","actions","newContact","addContact","resetForm","component","ListContacts","ItemsContact","Contact","Button","ButtonContainer","ContactList","isOpenModal","useSelector","getFilteredContacts","map","disabled","onClick","id","deleteContact","Modal","Overlay","FormModal","LabelModal","InputModal","BtnCloseModal","ButtonEdit","EditModal","idUser","isCloseModal","useState","userName","setUserName","userNumber","setUserNamber","handleCange","useEffect","handleCloseECC","key","window","addEventListener","removeEventListener","target","preventDefault","editContact","placeholder","size","isModal","setIsModal","setIdUser","userNamber","fetchContacts","length"],"sourceRoot":""}